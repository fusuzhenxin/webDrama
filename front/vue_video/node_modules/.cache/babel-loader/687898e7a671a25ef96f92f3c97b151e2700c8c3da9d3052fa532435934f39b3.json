{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref } from 'vue';\nimport request from \"@/utils/request\";\nimport { useRouter } from 'vue-router';\n// import videojs from 'video.js';\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  },\n  setup() {\n    // 使用 ref 创建响应式数据\n    const hotProducts = ref([]);\n    // 定义异步加载商品分类数据的方法\n    const loadProductCategories = async () => {\n      try {\n        // 发起请求获取商城商品分类数据\n        const res = await request.get('/file/selectTop101');\n        // 如果请求成功，更新商品分类数据\n        hotProducts.value = res.data.data;\n      } catch (error) {\n        // 捕获并处理请求错误\n        console.error('Error loading product categories:', error);\n      }\n    };\n\n    // 在组件挂载时调用加载商品分类数据的方法\n    loadProductCategories();\n    goToVideoDetail();\n    const router = useRouter();\n    const goToVideoDetail = productId => {\n      router.push({\n        name: 'VideoDetail',\n        params: {\n          id: productId,\n          Products: hotProducts.value\n        }\n      });\n      localStorage.setItem('id', productId);\n      localStorage.setItem('Products', JSON.stringify(hotProducts.value));\n    };\n    // 返回需要在模板中使用的数据和方法\n    return {\n      hotProducts\n    };\n  }\n};","map":{"version":3,"names":["ref","request","useRouter","name","props","msg","String","setup","hotProducts","loadProductCategories","res","get","value","data","error","console","goToVideoDetail","router","productId","push","params","id","Products","localStorage","setItem","JSON","stringify"],"sources":["F:\\video\\vue_video\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\n  <div class=\"product-sections\">\n    <br>\n    <h1>热门剧</h1>\n    <div class=\"product-section\">\n      <br>\n      <div class=\"product-list\">\n        <div v-for=\"(product, index) in hotProducts\" :key=\"index\" class=\"product-card\" @click=\"goToVideoDetail(product.id)\">\n          <div class=\"image-wrapper\">\n            <img :src=\"product.cover\" :alt=\"product.name\" class=\"product-image\">\n            <div class=\"play-button\">\n              <i class=\"fas fa-play\"></i>\n            </div>\n          </div>\n\n          <p>{{ product.name }}</p>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n\nimport { ref } from 'vue';\nimport request from \"@/utils/request\";\nimport {  useRouter } from 'vue-router';\n// import videojs from 'video.js';\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  },\n  setup() {\n    // 使用 ref 创建响应式数据\n    const hotProducts = ref([]);\n    // 定义异步加载商品分类数据的方法\n    const loadProductCategories = async () => {\n      try {\n        // 发起请求获取商城商品分类数据\n        const res = await request.get('/file/selectTop101');\n          // 如果请求成功，更新商品分类数据\n          hotProducts.value = res.data.data;\n      } catch (error) {\n        // 捕获并处理请求错误\n        console.error('Error loading product categories:', error);\n      }\n    };\n\n\n    // 在组件挂载时调用加载商品分类数据的方法\n    loadProductCategories();\n    goToVideoDetail()\n\n    const router = useRouter();\n    const goToVideoDetail = (productId) => {\n      router.push({ name: 'VideoDetail', params: { id: productId, Products: hotProducts.value } });\n      localStorage.setItem('id', productId);\n      localStorage.setItem('Products', JSON.stringify(hotProducts.value));\n    };\n    // 返回需要在模板中使用的数据和方法\n    return {\n      hotProducts,\n    };\n  },\n\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n.product-list {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n\n}\n\n.product-card {\n  width: calc(20% - 20px); /* 设置每个商品占据的宽度为总宽度的20%，减去外边距 */\n  margin-left: 10px; /* 设置商品之间的右外边距 */\n  margin-bottom: 20px; /* 设置商品之间的下外边距 */\n\n  padding: 10px; /* 添加内边距 */\n  box-sizing: border-box; /* 让内边距和边框计入盒模型的总宽度 */\n}\n.product-card .image-wrapper {\n  width: 190px; /* 设置容器宽度 */\n  height: 266px; /* 设置容器高度 */\n  overflow: hidden; /* 隐藏超出部分 */\n  border-radius: 5px;\n  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1); /* 添加阴影效果 */\n}\n\n.product-card img {\n  width: 100%; /* 设置图片宽度为容器宽度的100% */\n  height: 100%; /* 设置图片高度为容器高度的100% */\n  object-fit: cover; /* 图片填充方式 */\n}\n.image-wrapper {\n  position: relative;\n  overflow: hidden; /* 隐藏超出部分 */\n  border-radius: 10px;\n  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1); /* 添加阴影效果 */\n}\n\n.product-image {\n  transition: transform 0.3s ease; /* 添加过渡效果 */\n}\n\n.image-wrapper:hover .product-image {\n  transform: scale(1.05); /* 鼠标悬停时放大图片 */\n}\n\n.play-button {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: rgba(0, 0, 0, 0.5);\n  border-radius: 50%;\n  width: 60px;\n  height: 60px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  opacity: 0; /* 默认隐藏 */\n  transition: opacity 0.3s ease; /* 添加过渡效果 */\n}\n\n.image-wrapper:hover .play-button {\n  opacity: 1; /* 鼠标悬停时显示 */\n}\n\n.play-button i {\n  color: white;\n  font-size: 24px;\n}\n\n\n</style>\n"],"mappings":";AAwBA,SAASA,GAAE,QAAS,KAAK;AACzB,OAAOC,OAAM,MAAO,iBAAiB;AACrC,SAAUC,SAAQ,QAAS,YAAY;AACvC;AACA,eAAe;EACbC,IAAI,EAAE,YAAY;EAClBC,KAAK,EAAE;IACLC,GAAG,EAAEC;EACP,CAAC;EACDC,KAAKA,CAAA,EAAG;IACN;IACA,MAAMC,WAAU,GAAIR,GAAG,CAAC,EAAE,CAAC;IAC3B;IACA,MAAMS,qBAAoB,GAAI,MAAAA,CAAA,KAAY;MACxC,IAAI;QACF;QACA,MAAMC,GAAE,GAAI,MAAMT,OAAO,CAACU,GAAG,CAAC,oBAAoB,CAAC;QACjD;QACAH,WAAW,CAACI,KAAI,GAAIF,GAAG,CAACG,IAAI,CAACA,IAAI;MACrC,EAAE,OAAOC,KAAK,EAAE;QACd;QACAC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MAC3D;IACF,CAAC;;IAGD;IACAL,qBAAqB,CAAC,CAAC;IACvBO,eAAe,CAAC;IAEhB,MAAMC,MAAK,GAAIf,SAAS,CAAC,CAAC;IAC1B,MAAMc,eAAc,GAAKE,SAAS,IAAK;MACrCD,MAAM,CAACE,IAAI,CAAC;QAAEhB,IAAI,EAAE,aAAa;QAAEiB,MAAM,EAAE;UAAEC,EAAE,EAAEH,SAAS;UAAEI,QAAQ,EAAEd,WAAW,CAACI;QAAM;MAAE,CAAC,CAAC;MAC5FW,YAAY,CAACC,OAAO,CAAC,IAAI,EAAEN,SAAS,CAAC;MACrCK,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEC,IAAI,CAACC,SAAS,CAAClB,WAAW,CAACI,KAAK,CAAC,CAAC;IACrE,CAAC;IACD;IACA,OAAO;MACLJ;IACF,CAAC;EACH;AAEF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}