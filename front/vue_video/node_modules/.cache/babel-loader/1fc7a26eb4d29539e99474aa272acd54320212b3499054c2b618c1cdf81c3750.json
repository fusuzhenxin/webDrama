{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-469af010\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"drama-sections\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"短剧推荐\", -1 /* HOISTED */));\nconst _hoisted_4 = {\n  class: \"drama-section\"\n};\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_6 = {\n  class: \"drama-list\"\n};\nconst _hoisted_7 = {\n  class: \"drama-group\"\n};\nconst _hoisted_8 = [\"onClick\"];\nconst _hoisted_9 = {\n  class: \"image-wrapper\"\n};\nconst _hoisted_10 = [\"src\", \"alt\"];\nconst _hoisted_11 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"play-button\"\n}, [/*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fas fa-play\"\n})], -1 /* HOISTED */));\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _hoisted_3, _createElementVNode(\"div\", _hoisted_4, [_hoisted_5, _createElementVNode(\"div\", _hoisted_6, [_createCommentVNode(\" 循环渲染重新排列后的数据 \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.groupedDramas, (group, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index\n    }, [_createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"h2\", null, _toDisplayString(group[0].name), 1 /* TEXT */), _createCommentVNode(\" 使用相同剧名的第一个视频的剧名作为组名 \"), _createCommentVNode(\" 渲染每一集的信息 \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(group, (drama, i) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: i,\n        class: \"drama-card\",\n        onClick: $event => $setup.goToDramaDetail(drama.id)\n      }, [_createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"img\", {\n        src: drama.cover,\n        alt: drama.name,\n        class: \"drama-image\"\n      }, null, 8 /* PROPS */, _hoisted_10), _hoisted_11]), _createElementVNode(\"p\", null, _toDisplayString(drama.name), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_8);\n    }), 128 /* KEYED_FRAGMENT */))])]);\n  }), 128 /* KEYED_FRAGMENT */))])])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_createCommentVNode","_Fragment","_renderList","$setup","groupedDramas","group","index","key","_hoisted_7","_toDisplayString","name","drama","i","onClick","$event","goToDramaDetail","id","_hoisted_9","src","cover","alt","_hoisted_10","_hoisted_11","_hoisted_8"],"sources":["F:\\video\\vue_video\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\n  <div class=\"drama-sections\">\n    <br>\n    <h1>短剧推荐</h1>\n    <div class=\"drama-section\">\n      <br>\n      <div class=\"drama-list\">\n        <!-- 循环渲染重新排列后的数据 -->\n        <div v-for=\"(group, index) in groupedDramas\" :key=\"index\">\n          <div class=\"drama-group\">\n            <h2>{{ group[0].name }}</h2> <!-- 使用相同剧名的第一个视频的剧名作为组名 -->\n            <!-- 渲染每一集的信息 -->\n            <div v-for=\"(drama, i) in group\" :key=\"i\" class=\"drama-card\" @click=\"goToDramaDetail(drama.id)\">\n              <div class=\"image-wrapper\">\n                <img :src=\"drama.cover\" :alt=\"drama.name\" class=\"drama-image\">\n                <div class=\"play-button\">\n                  <i class=\"fas fa-play\"></i>\n                </div>\n              </div>\n              <p>{{ drama.name }}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nimport request from \"@/utils/request\";\nimport { useRouter } from 'vue-router';\n\n// Reactive data for grouped short dramas\nconst groupedDramas = ref([]);\n\n// Method to fetch short drama data asynchronously\nconst loadShortDramas = async (classify) => {\n  try {\n    // Fetch short drama data\n    const res = await request.get('/file/selectTop10', { params: { classify: classify } });\n    // If successful, update the short drama data\n    const dramas = res.data.data;\n    groupDramasByName(dramas); // 分组剧名相同的信息\n  } catch (error) {\n    // Catch and handle errors\n    console.error('Error loading short dramas:', error);\n  }\n};\nloadShortDramas(\"重生\");\n\n// Router instance\nconst router = useRouter();\n\n// Method to navigate to drama detail page\nconst goToDramaDetail = (dramaId) => {\n  // Navigate to the detail page and pass drama ID as route parameter\n  router.push({ name: 'videoDetail', params: { id: dramaId } });\n};\n\n// Function to group short dramas by name\nconst groupDramasByName = (dramas) => {\n  const grouped = {};\n  dramas.forEach(drama => {\n    if (!grouped[drama.name]) {\n      grouped[drama.name] = [];\n    }\n    grouped[drama.name].push(drama);\n  });\n  // Convert object to array of arrays\n  groupedDramas.value = Object.values(grouped);\n};\n\n</script>\n\n<style scoped>\n/* CSS styles for the drama section */\n\nh1 {\n  margin: 40px 0 0;\n}\n\n.drama-list {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n}\n\n.drama-group {\n  margin-bottom: 20px;\n}\n\n.drama-card {\n  width: calc(20% - 20px);\n  margin-left: 10px;\n  margin-bottom: 20px;\n  padding: 10px;\n  box-sizing: border-box;\n}\n\n.drama-card .image-wrapper {\n  width: 190px;\n  height: 266px;\n  overflow: hidden;\n  border-radius: 5px;\n  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n.drama-card img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.image-wrapper {\n  position: relative;\n  overflow: hidden;\n  border-radius: 10px;\n  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n.drama-image {\n  transition: transform 0.3s ease;\n}\n\n.image-wrapper:hover .drama-image {\n  transform: scale(1.05);\n}\n\n.play-button {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: rgba(0, 0, 0, 0.5);\n  border-radius: 50%;\n  width: 60px;\n  height: 60px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  opacity: 0;\n  transition: opacity 0.3s ease;\n}\n\n.image-wrapper:hover .play-button {\n  opacity: 1;\n}\n\n.play-button i {\n\n  color: white;\n  font-size: 24px;\n}\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAgB;gEACzBC,mBAAA,CAAI;gEACJA,mBAAA,CAAa,YAAT,MAAI;;EACHD,KAAK,EAAC;AAAe;gEACxBC,mBAAA,CAAI;;EACCD,KAAK,EAAC;AAAY;;EAGdA,KAAK,EAAC;AAAa;mBATlC;;EAamBA,KAAK,EAAC;AAAe;oBAbxC;iEAegBC,mBAAA,CAEM;EAFDD,KAAK,EAAC;AAAa,I,aACtBC,mBAAA,CAA2B;EAAxBD,KAAK,EAAC;AAAa,G;;uBAftCE,mBAAA,CAwBM,OAxBNC,UAwBM,GAvBJC,UAAI,EACJC,UAAa,EACbJ,mBAAA,CAoBM,OApBNK,UAoBM,GAnBJC,UAAI,EACJN,mBAAA,CAiBM,OAjBNO,UAiBM,GAhBJC,mBAAA,kBAAqB,G,kBACrBP,mBAAA,CAcMQ,SAAA,QAtBdC,WAAA,CAQsCC,MAAA,CAAAC,aAAa,EARnD,CAQqBC,KAAK,EAAEC,KAAK;yBAAzBb,mBAAA,CAcM;MAdwCc,GAAG,EAAED;IAAK,IACtDd,mBAAA,CAYM,OAZNgB,UAYM,GAXJhB,mBAAA,CAA4B,YAAAiB,gBAAA,CAArBJ,KAAK,IAAIK,IAAI,kBAASV,mBAAA,yBAA4B,EACzDA,mBAAA,cAAiB,G,kBACjBP,mBAAA,CAQMQ,SAAA,QApBlBC,WAAA,CAYsCG,KAAK,EAZ3C,CAYyBM,KAAK,EAAEC,CAAC;2BAArBnB,mBAAA,CAQM;QAR4Bc,GAAG,EAAEK,CAAC;QAAErB,KAAK,EAAC,YAAY;QAAEsB,OAAK,EAAAC,MAAA,IAAEX,MAAA,CAAAY,eAAe,CAACJ,KAAK,CAACK,EAAE;UAC3FxB,mBAAA,CAKM,OALNyB,UAKM,GAJJzB,mBAAA,CAA8D;QAAxD0B,GAAG,EAAEP,KAAK,CAACQ,KAAK;QAAGC,GAAG,EAAET,KAAK,CAACD,IAAI;QAAEnB,KAAK,EAAC;8BAdhE8B,WAAA,GAegBC,WAEM,C,GAER9B,mBAAA,CAAuB,WAAAiB,gBAAA,CAAjBE,KAAK,CAACD,IAAI,iB,iBAnB9Ba,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}