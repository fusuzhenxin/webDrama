{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport { useRoute } from 'vue-router';\nimport request from \"@/utils/request\";\n\n// 使用 ref 创建响应式数据\n\nexport default {\n  __name: 'VideoDetail',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const product = ref(null);\n\n    // 获取路由参数中的产品ID\n    const route = useRoute();\n    const productId = route.params.id;\n\n    // 定义异步加载产品详情数据的方法\n    const loadProductDetail = async () => {\n      try {\n        // 发起请求获取产品详情数据\n        const res = await request.get(`/file/${productId}`);\n        // 如果请求成功，更新产品详情数据\n        product.value = res.data;\n      } catch (error) {\n        // 捕获并处理请求错误\n        console.error('Error loading product detail:', error);\n      }\n    };\n    onMounted(loadProductDetail); // 在组件挂载后加载产品详情数据\n\n    const __returned__ = {\n      product,\n      route,\n      productId,\n      loadProductDetail,\n      ref,\n      onMounted,\n      get useRoute() {\n        return useRoute;\n      },\n      get request() {\n        return request;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","useRoute","request","product","route","productId","params","id","loadProductDetail","res","get","value","data","error","console"],"sources":["F:/video/vue_video/src/views/VideoDetail.vue"],"sourcesContent":["<template>\r\n  <div class=\"product-detail\">\r\n    <h1>{{ product.name }}</h1>\r\n    <img :src=\"product.cover\" :alt=\"product.name\" class=\"product-image\">\r\n    <p>{{ product.description }}</p>\r\n    <!-- 其他产品详情 -->\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted } from 'vue';\r\nimport { useRoute } from 'vue-router';\r\nimport request from \"@/utils/request\";\r\n\r\n// 使用 ref 创建响应式数据\r\nconst product = ref(null);\r\n\r\n// 获取路由参数中的产品ID\r\nconst route = useRoute();\r\nconst productId = route.params.id;\r\n\r\n// 定义异步加载产品详情数据的方法\r\nconst loadProductDetail = async () => {\r\n  try {\r\n    // 发起请求获取产品详情数据\r\n    const res = await request.get(`/file/${productId}`);\r\n    // 如果请求成功，更新产品详情数据\r\n    product.value = res.data;\r\n  } catch (error) {\r\n    // 捕获并处理请求错误\r\n    console.error('Error loading product detail:', error);\r\n  }\r\n};\r\n\r\nonMounted(loadProductDetail); // 在组件挂载后加载产品详情数据\r\n</script>\r\n\r\n\r\n<style scoped>\r\n/* 样式可以根据需求自行添加 */\r\n.product-detail {\r\n  /* 产品详情页面样式 */\r\n}\r\n.product-image {\r\n  /* 产品图片样式 */\r\n}\r\n</style>\r\n"],"mappings":"AAUA,SAASA,GAAG,EAAEC,SAAS,QAAQ,KAAK;AACpC,SAASC,QAAQ,QAAQ,YAAY;AACrC,OAAOC,OAAO,MAAM,iBAAiB;;AAErC;;;;;;;;IACA,MAAMC,OAAO,GAAGJ,GAAG,CAAC,IAAI,CAAC;;IAEzB;IACA,MAAMK,KAAK,GAAGH,QAAQ,CAAC,CAAC;IACxB,MAAMI,SAAS,GAAGD,KAAK,CAACE,MAAM,CAACC,EAAE;;IAEjC;IACA,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAI;QACF;QACA,MAAMC,GAAG,GAAG,MAAMP,OAAO,CAACQ,GAAG,CAAE,SAAQL,SAAU,EAAC,CAAC;QACnD;QACAF,OAAO,CAACQ,KAAK,GAAGF,GAAG,CAACG,IAAI;MAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACd;QACAC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF,CAAC;IAEDb,SAAS,CAACQ,iBAAiB,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}