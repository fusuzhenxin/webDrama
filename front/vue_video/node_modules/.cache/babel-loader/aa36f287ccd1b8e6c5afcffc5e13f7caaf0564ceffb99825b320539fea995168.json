{"ast":null,"code":"import { ref } from 'vue';\nimport request from \"@/utils/request\";\nimport videojs from 'video.js';\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  },\n  setup() {\n    // 使用 ref 创建响应式数据\n    const hotProducts = ref([]);\n    console.log(\"数据:\", hotProducts.value);\n    // 定义异步加载商品分类数据的方法\n    const loadProductCategories = async () => {\n      try {\n        // 发起请求获取商城商品分类数据\n        const res = await request.get('/file/selectTop101');\n        console.log(\"=====================\", res);\n        console.log(\"==========ssssss===========\", res);\n        // 如果请求成功，更新商品分类数据\n        hotProducts.value = res.data.data;\n        console.log(\"数据返回=============\", res.data.data);\n      } catch (error) {\n        // 捕获并处理请求错误\n        console.error('Error loading product categories:', error);\n      }\n    };\n\n    // 在组件挂载时调用加载商品分类数据的方法\n    loadProductCategories();\n\n    // 返回需要在模板中使用的数据和方法\n    return {\n      hotProducts\n    };\n  },\n  mounted() {\n    // 在组件挂载完成后初始化视频播放器\n    // 在组件挂载完成后初始化视频播放器\n    if (this.$refs.videoPlayer) {\n      videojs(this.$refs.videoPlayer);\n    }\n  }\n};","map":{"version":3,"names":["ref","request","videojs","name","props","msg","String","setup","hotProducts","console","log","value","loadProductCategories","res","get","data","error","mounted","$refs","videoPlayer"],"sources":["F:\\video\\vue_video\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\n  <div class=\"product-sections\">\n    <br>\n    <h1>热门商品</h1>\n    <div class=\"product-section\">\n      <br>\n      <div class=\"product-list\">\n        <div v-for=\"(product, index) in hotProducts\" :key=\"index\" class=\"product-card\" >\n          <div class=\"image-wrapper\">\n            <img :src=\"product.cover\" :alt=\"product.name\">\n            <!-- 视频播放器 -->\n            <video\n                ref=\"videoPlayer\"\n                class=\"video-js vjs-default-skin\"\n                controls\n                preload=\"auto\"\n               \n                data-setup=\"{}\"\n            >\n              <source :src=\"product.url\" type=\"video/mp4\" />\n              <!-- 如果需要兼容其他格式的视频文件，可以添加多个<source>标签 -->\n            </video>\n          </div>\n\n          <p>{{ product.name }}</p>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n\nimport { ref } from 'vue';\nimport request from \"@/utils/request\";\nimport videojs from 'video.js';\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  },\n  setup() {\n    // 使用 ref 创建响应式数据\n    const hotProducts = ref([]);\n\n    console.log(\"数据:\",hotProducts.value)\n    // 定义异步加载商品分类数据的方法\n    const loadProductCategories = async () => {\n      try {\n        // 发起请求获取商城商品分类数据\n        const res = await request.get('/file/selectTop101');\n        console.log(\"=====================\",res)\n\n          console.log(\"==========ssssss===========\",res)\n          // 如果请求成功，更新商品分类数据\n          hotProducts.value = res.data.data;\n          console.log(\"数据返回=============\",res.data.data)\n\n      } catch (error) {\n        // 捕获并处理请求错误\n        console.error('Error loading product categories:', error);\n      }\n    };\n\n    // 在组件挂载时调用加载商品分类数据的方法\n    loadProductCategories();\n\n\n    // 返回需要在模板中使用的数据和方法\n    return {\n      hotProducts,\n    };\n  },\n  mounted() {\n    // 在组件挂载完成后初始化视频播放器\n    // 在组件挂载完成后初始化视频播放器\n    if (this.$refs.videoPlayer) {\n      videojs(this.$refs.videoPlayer);\n    }\n  }\n\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n"],"mappings":"AAiCA,SAASA,GAAE,QAAS,KAAK;AACzB,OAAOC,OAAM,MAAO,iBAAiB;AACrC,OAAOC,OAAM,MAAO,UAAU;AAC9B,eAAe;EACbC,IAAI,EAAE,YAAY;EAClBC,KAAK,EAAE;IACLC,GAAG,EAAEC;EACP,CAAC;EACDC,KAAKA,CAAA,EAAG;IACN;IACA,MAAMC,WAAU,GAAIR,GAAG,CAAC,EAAE,CAAC;IAE3BS,OAAO,CAACC,GAAG,CAAC,KAAK,EAACF,WAAW,CAACG,KAAK;IACnC;IACA,MAAMC,qBAAoB,GAAI,MAAAA,CAAA,KAAY;MACxC,IAAI;QACF;QACA,MAAMC,GAAE,GAAI,MAAMZ,OAAO,CAACa,GAAG,CAAC,oBAAoB,CAAC;QACnDL,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAACG,GAAG;QAErCJ,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAACG,GAAG;QAC7C;QACAL,WAAW,CAACG,KAAI,GAAIE,GAAG,CAACE,IAAI,CAACA,IAAI;QACjCN,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAACG,GAAG,CAACE,IAAI,CAACA,IAAI;MAEjD,EAAE,OAAOC,KAAK,EAAE;QACd;QACAP,OAAO,CAACO,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MAC3D;IACF,CAAC;;IAED;IACAJ,qBAAqB,CAAC,CAAC;;IAGvB;IACA,OAAO;MACLJ;IACF,CAAC;EACH,CAAC;EACDS,OAAOA,CAAA,EAAG;IACR;IACA;IACA,IAAI,IAAI,CAACC,KAAK,CAACC,WAAW,EAAE;MAC1BjB,OAAO,CAAC,IAAI,CAACgB,KAAK,CAACC,WAAW,CAAC;IACjC;EACF;AAEF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}