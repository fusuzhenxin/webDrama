{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-469af010\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"drama-sections\"\n};\nconst _hoisted_2 = [\"src\", \"alt\"];\nconst _hoisted_3 = {\n  class: \"text item\"\n};\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"el-icon-caret-right play-button\"\n}, null, -1 /* HOISTED */));\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_divider = _resolveComponent(\"el-divider\");\n  const _component_el_card = _resolveComponent(\"el-card\");\n  const _component_el_col = _resolveComponent(\"el-col\");\n  const _component_el_row = _resolveComponent(\"el-row\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_el_divider, null, {\n    default: _withCtx(() => [_createTextVNode(\"重生\")]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_el_row, {\n    gutter: 10\n  }, {\n    default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.shortDramas, (drama, index) => {\n      return _openBlock(), _createBlock(_component_el_col, {\n        span: 4,\n        key: index\n      }, {\n        default: _withCtx(() => [_createVNode(_component_el_card, {\n          onClick: $event => $setup.goToDramaDetail(drama.id, drama.name)\n        }, {\n          default: _withCtx(() => [_createElementVNode(\"img\", {\n            src: drama.cover,\n            alt: drama.name,\n            class: \"drama-image\"\n          }, null, 8 /* PROPS */, _hoisted_2), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"span\", null, _toDisplayString(drama.name), 1 /* TEXT */), _createCommentVNode(\" 调整播放按钮样式 \"), _hoisted_4])]),\n          _: 2 /* DYNAMIC */\n        }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\"])]),\n        _: 2 /* DYNAMIC */\n      }, 1024 /* DYNAMIC_SLOTS */);\n    }), 128 /* KEYED_FRAGMENT */))]),\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_createVNode","_component_el_divider","default","_withCtx","_createTextVNode","_","_component_el_row","gutter","_Fragment","_renderList","$setup","shortDramas","drama","index","_createBlock","_component_el_col","span","key","_component_el_card","onClick","$event","goToDramaDetail","id","name","src","cover","alt","_hoisted_2","_hoisted_3","_toDisplayString","_createCommentVNode","_hoisted_4"],"sources":["F:\\video\\vue\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\n  <div class=\"drama-sections\">\n    <el-divider>重生</el-divider>\n    <el-row :gutter=\"10\">\n      <el-col :span=\"4\" v-for=\"(drama, index) in shortDramas\" :key=\"index\">\n        <el-card @click=\"goToDramaDetail(drama.id, drama.name)\">\n          <img :src=\"drama.cover\" :alt=\"drama.name\" class=\"drama-image\">\n          <div class=\"text item\">\n            <span>{{ drama.name }}</span>\n            <!-- 调整播放按钮样式 -->\n            <i class=\"el-icon-caret-right play-button\"></i>\n          </div>\n        </el-card>\n      </el-col>\n    </el-row>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nimport request from \"@/utils/request\";\nimport { useRouter } from 'vue-router';\nimport '@fortawesome/fontawesome-free/css/all.css'; // 在 JavaScript 文件中引入\n\n// Reactive data for short dramas\nconst shortDramas = ref([]);\n\n// Method to fetch short drama data asynchronously\nconst loadShortDramas = async (classify) => {\n  try {\n    // Fetch short drama data\n    const res = await request.get('/details/selectTop10', { params: { classify: classify } });\n    // If successful, update the short drama data\n    shortDramas.value = res.data.data;\n  } catch (error) {\n    // Catch and handle errors\n    console.error('Error loading short dramas:', error);\n  }\n};\nloadShortDramas(\"重生\");\n\n// Router instance\nconst router = useRouter();\n\n// Method to navigate to drama detail page\nconst goToDramaDetail = (dramaId, name) => {\n  // Navigate to the detail page and pass drama ID as route parameter\n  router.push({ name: 'videoDetail', params: { id: dramaId , name: name} });\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.drama-sections {\n  padding: 20px;\n}\n\n.drama-image {\n  width: 100%;\n  height: 200px;\n  object-fit: cover;\n}\n\n.play-button {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  font-size: 36px;\n  color: white;\n  opacity: 0.8;\n}\n\n.text {\n  position: absolute;\n  bottom: 10px;\n  left: 10px;\n  color: white;\n}\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAgB;mBAD7B;;EAOeA,KAAK,EAAC;AAAW;gEAGpBC,mBAAA,CAA+C;EAA5CD,KAAK,EAAC;AAAiC;;;;;;uBATpDE,mBAAA,CAcM,OAdNC,UAcM,GAbJC,YAAA,CAA2BC,qBAAA;IAF/BC,OAAA,EAAAC,QAAA,CAEgB,MAAE,CAFlBC,gBAAA,CAEgB,IAAE,E;IAFlBC,CAAA;MAGIL,YAAA,CAWSM,iBAAA;IAXAC,MAAM,EAAE;EAAE;IAHvBL,OAAA,EAAAC,QAAA,CAIwB,MAAqC,E,kBAAvDL,mBAAA,CASSU,SAAA,QAbfC,WAAA,CAIiDC,MAAA,CAAAC,WAAW,EAJ5D,CAIgCC,KAAK,EAAEC,KAAK;2BAAtCC,YAAA,CASSC,iBAAA;QATAC,IAAI,EAAE,CAAC;QAAyCC,GAAG,EAAEJ;;QAJpEX,OAAA,EAAAC,QAAA,CAKQ,MAOU,CAPVH,YAAA,CAOUkB,kBAAA;UAPAC,OAAK,EAAAC,MAAA,IAAEV,MAAA,CAAAW,eAAe,CAACT,KAAK,CAACU,EAAE,EAAEV,KAAK,CAACW,IAAI;;UAL7DrB,OAAA,EAAAC,QAAA,CAMU,MAA8D,CAA9DN,mBAAA,CAA8D;YAAxD2B,GAAG,EAAEZ,KAAK,CAACa,KAAK;YAAGC,GAAG,EAAEd,KAAK,CAACW,IAAI;YAAE3B,KAAK,EAAC;kCAN1D+B,UAAA,GAOU9B,mBAAA,CAIM,OAJN+B,UAIM,GAHJ/B,mBAAA,CAA6B,cAAAgC,gBAAA,CAApBjB,KAAK,CAACW,IAAI,kBACnBO,mBAAA,cAAiB,EACjBC,UAA+C,C;UAV3D1B,CAAA;;QAAAA,CAAA;;;IAAAA,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}